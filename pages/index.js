import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.scss";
import jwt_decode from "jwt-decode";
import Link from 'next/link'
import axios from "axios";


export default function Home() {

  var arr = []



  const [test, setTest] = useState([])

  const [dataGui, setDataGui] = useState([])
  const [dataNhan, setDataNhan] = useState([])

  const [username, setUsername] = useState('')
  const [data, setData] = useState([])

  const [usernameFriend, setUsernameFriend] = useState('')
  const [message, setMessage] = useState('')


  useEffect(() => {
    var token = localStorage.getItem("token_Message_App")

    if (token) {
      var decoded = jwt_decode(localStorage.getItem("token_Message_App"));
      setUsername(decoded.username)

    }

  }, [])

  useEffect(() => {
    const token = localStorage.getItem('token_Message_App')
    axios.get(`https://messager-be.onrender.com/api/listuser`, { headers: { 'Authorization': token } })
      .then(res => {
        setData(res.data)
      })
  }, [])

  useEffect(() => {
    if (username != '' && usernameFriend != '') {
      axios.get(`https://messager-be.onrender.com/api/listcmt/${username}/${usernameFriend}`)
        .then(res => {
          setDataGui(res.data)
        })
    }
  }, [usernameFriend, dataGui])

  useEffect(() => {
    if (username != '' && usernameFriend != '') {
      axios.get(`https://messager-be.onrender.com/api/listcmt/${usernameFriend}/${username}`)
        .then(res => {
          setDataNhan(res.data)
        })
    }
  }, [usernameFriend, dataGui])

  if (dataGui && dataNhan) {

    arr = dataGui.concat(dataNhan)

    arr.sort(function (a, b) {
      return new Date(a.time) - new Date(b.time);
    });

  }

  const handleLogOut = () => {
    if (window.confirm("You want to sign out ?")) {
      localStorage.removeItem("token_Message_App");
      window.location.reload();
    }
  }

  const handleChat = (id, username) => {
    setUsernameFriend(username)


  }

  const handleCloseBox = () => {
    setUsernameFriend('')


  }

  const handleSend = () => {

    if (message == '') {
      alert('Enter message')
    }
    else {
      const d = new Date();
      let day = d.getDate()
      let year = d.getFullYear()
      let month = d.getMonth() + 1
      let hour = d.getHours();
      let minutes = d.getMinutes();

      if (hour <= 12) {
        var date = month + '/' + day + '/' + year + ' - ' + hour + ':' + minutes + ' am'
      }
      else if (hour > 12) {
        hour = hour - 12;
        var date = month + '/' + day + '/' + year + ' - ' + hour + ':' + minutes + ' pm'
      }

      axios.post('https://messager-be.onrender.com/comment', {
        message, username, usernameFriend, date, d
      })
        .then(res => {
        })
        .catch(err => {
          console.log(err);
        });

      setMessage('')
    }


  }


  return (

    <div>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon1.ico" />
      </Head>


      <div className={styles.title}>
        {username != '' ? (
          <p>Hello, {username} <i onClick={handleLogOut} className="fa-solid fa-right-from-bracket"></i>
          </p>) : (
          <p><Link href="/login">Please login</Link></p>
        )}
      </div>

      <h4 style={{ marginLeft: 80 }}><i className="fa-solid fa-users"></i> My friend</h4>

      <div className={styles.body}>

        {data.length > 0 ? (
          <div className={styles.listFriend}>
            {data.map((item, index) => {
              if (item.username != username) {
                return (
                  <li key={index}>
                    <p> <i className="fa-solid fa-user"></i> {item.username}</p>
                    <i onClick={() => handleChat(item._id, item.username)} className="fa-regular fa-comment-dots fa-2x"></i>
                  </li>
                )
              }
            })}
          </div>
        ) : ('')}


        {usernameFriend ? (
          <div className={styles.boxMessage}>

            <div className={styles.boxMessage_header}>
              <p> <i className="fa-solid fa-user"></i> {usernameFriend.toUpperCase()}</p>
              <button onClick={handleCloseBox}>X</button>
            </div>


            <div className={styles.boxMessage_body}>
              {arr.map((item, index) => {
                return (
                  <div key={index}>
                    {item.ngGui == username ? (
                      <div className={styles.me}>
                        <p>{item.date}</p>
                        <li>
                          {item.noiDung}
                        </li>
                      </div>
                    ) : (
                      <div className={styles.friend}>
                        <p>{item.date}</p>
                        <p>
                          <i className="fa-solid fa-user"></i>
                          <li>
                            {item.noiDung}
                          </li>
                        </p>

                      </div>
                    )}
                  </div>
                )
              })}
            </div>

            <div className={styles.boxMessage_footer}>
              <input
                placeholder="Enter message"
                value={message}
                onChange={e => { setMessage(e.target.value) }}
              />
              <button onClick={handleSend}>Send</button>
            </div>

          </div>
        ) : (<h3 style={{ fontFamily: 'Courier New', marginLeft: 30 }}>Please choose friends</h3>)}


      </div>

    </div>


  );
}
